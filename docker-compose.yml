version: "3.8"

services:
  postgres:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    volumes:
      - ./backup.sql:/docker-entrypoint-initdb.d/backup.sql
      - backend_pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - my_network

  backend_app:
    image: backend_image_v2
    container_name: spring_app
    privileged: true
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      COINMARKETCAP_API_URL: d42f0690-3288-4f73-8230-da9ac5135859
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - my_network

  solana_scripts_service:
    image: solana_scripts_image
    container_name: solana_scripts_service
    volumes:
      - ./backend/src/main/java/org/example/backend/client/client/service/solanaScripts:/app
    working_dir: /app
    ports:
      - "3001:3001"
    command: ["npm", "start"]
    networks:
      - my_network

  model_server:
    image: model_server
    container_name: model_server
    ports:
      - "5000:5000"
    networks:
      - my_network
    volumes:
      - ./models:/models  # Optional, if you need to bind models directory

  frontend_app:
    image: frontend_image
    container_name: frontend_app
    volumes:
      - ./frontend:/usr/app
    ports:
      - "3000:3000"
    command: ["npm", "start"]
    networks:
      - my_network

volumes:
  backend_pg_data:

networks:
  my_network:
    driver: bridge
